{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-insarscript","title":"Welcome to InSARScript !","text":"<p>InSAR Script is an open-source package designed to support the full InSAR processing pipeline. The primary goal of this package is to provide a streamlined and user-friendly InSAR processing experience across multiple satellite products.</p> <p>This document will assume you have fundimental understanding of: </p> <ul> <li>Python </li> <li>Linux</li> <li>Conda</li> <li>Docker (Optional)</li> <li>Apptainer (Optional)</li> </ul>"},{"location":"#system-requirement","title":"System Requirement","text":"<p>InSARScript is designed to run on Unix-based systems. Internet connection is required.  Windows compatibility is under testing and may not function reliably.</p> <p>The package has been tested under Ubuntu 22.04.4 LTS </p> <p>Test environment:</p> Category Model CPU AMD Ryzen 7 7800x3d GPU Nvidia 4070 Super Memory 64GB DDR5 Operate System Ubuntu 22.04.4 LTS"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This package is provided \"as-is\" without any warranties, express or implied. The authors and contributors make no guarantees regarding the functionality, reliability, or suitability of the package for any particular purpose. By using this package, you assume all risks associated with its use, and the developers are not liable for any damages or issues that may arise, whether directly or indirectly, from its use.</p>"},{"location":"#need-help","title":"Need Help?","text":"<p>Meanwhile, if you have any question relate to the package or the documentation, please feel free to submit ,  join ,  or send me </p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":""},{"location":"quickstart/install/","title":"Setup","text":""},{"location":"quickstart/install/#install","title":"Install","text":"<p>InSAR Script is currently under active development. You can install the latest available version directly from Conda:</p> <p>Note</p> <p>You may want to start with a fresh environment by: </p> <p><code>conda create -n insarscript python=3.12 &amp;&amp; conda activate insarscript</code></p> <p><pre><code>conda install insarscript -c conda-forge\n</code></pre> OR </p> <p>from pip:</p> <p>Note</p> <p>Since GDAL depends on non-Python system libraries, we will add it via conda: </p> <pre><code>pip install insarscript\nconda install gdal\n</code></pre>"},{"location":"quickstart/install/#development-setup","title":"Development Setup","text":"<p>To set up a development environment for the latest dev version, clone the repository and create the Conda environment: : </p> <pre><code>git clone https://github.com/jldz9/InSARScript.git\ncd InSARScript\nconda env create -f environment.yml -n insar_dev\n</code></pre> <p>Note</p> <p>Or <code>mamba env create -f environment.yml -n insar_dev</code> </p> <p>if you have mamba installed for faster environment solve</p> <p>This will create a Conda environment named insar_dev, which includes all dependencies required for development.</p>"},{"location":"quickstart/install/#account-setup","title":"Account Setup","text":"<p>This program requires multiple online accounts for full functionality. Registration for these accounts is completely free.</p>"},{"location":"quickstart/install/#nasa-earthdata","title":"NASA Earthdata","text":"<p>This account is required for searching satellite scenes, downloading DEMs and orbit files, and submitting online interferogram processing jobs.</p> <p>Once the registration is complete create a file named <code>.netrc</code> under your home directory if not exist and add  <pre><code>machine urs.earthdata.nasa.gov\n    login Your_Earthdata_username\n    password Your_Earthdata_password\n</code></pre> <code>OR</code></p> <p>The program will prompts for login on first use.</p>"},{"location":"quickstart/install/#copernicus-data-space-ecosystem","title":"Copernicus Data Space Ecosystem","text":"<p>This account is required for downloading orbit files, the release of orbit files on this website is faster than NASA earthdata for couple hours to days. </p> <p>Once the registration is complete create a file named <code>.netrc</code> under your home directory if not exist and add </p> <pre><code>machine dataspace.copernicus.eu\n    login Your_CDSE_username\n    password Your_CDSE_password \n</code></pre> <p><code>OR</code> </p> <p>The program will prompts for login on first use.</p>"},{"location":"quickstart/install/#copernicus-climate-data-store","title":"Copernicus Climate Data Store","text":"<p>This account is required to perform tropospheric correction using PyAPS.</p> <p>Once the registration is complete create a file named <code>.cdsapirc</code> under your home directory if not exist and add you API Token:</p> <pre><code>url: https://cds.climate.copernicus.eu/api\nkey: your-personal-access-token\n</code></pre>"},{"location":"quickstart/workflow/","title":"Workflow","text":"<p>This section will get you on track as soon as possible. The complete InSAR time-series processing workflow includes:</p> <pre><code>graph\n    A[Set AOI] --&gt; B[Search];\n    B[Search] --&gt; C[local processing];\n    B[Search] --&gt; D[Online processing];\n    D --&gt; E[Download];\n    C --&gt; F[Interferograms];\n    E --&gt; F[Interferograms];\n    F--&gt; G[SBAS];\n    G --&gt; H[Post-Processing];</code></pre> <p>Note</p> <p>The example in QuickStart process Sentinel-1 SLCs under IW mode. </p>"},{"location":"quickstart/workflow/#set-aoi","title":"Set AOI","text":"<p>InSARScript current support bounding box method to select AOI. To define AOI, simply create a list of coordinates by:</p> <p><pre><code>AOI = [124.67, 46.38, 125.35, 46.85]\n</code></pre> The AOI should be specified as [min_long, min_lat, max_long, max_lat], this program will assume CRS of AOI is EPSG:4326 (WGS84)</p>"},{"location":"quickstart/workflow/#search","title":"Search","text":"<p>Seaching and downloading of satellite scenes by using: </p> <p><pre><code>from insarscript import S1_SLC\n\ns1 = S1_SLC(\n    platform=['Sentinel-1A', 'Sentinel-1B', 'Sentinel-1C'],\n    AscendingflightDirection=False,\n    bbox = AOI,\n    start='2020-01-01',\n    end='2020-12-31',\n    output_dir = '~/tmp',\n)\nresults = s1.search()\ns1.download()\n</code></pre> This will download availiable Sentinel-1 SLCs that cover your AOI for local processing uses.</p>"},{"location":"quickstart/workflow/#filter-search-results","title":"Filter search results","text":"<p>However, your AOI probably spans multiple scenes. To filter the search results, you can use: <pre><code>s1.footprint()\n</code></pre> This will display a footprint map of the available Sentinel-1 scenes that covers the AOI. The stack indicates numbers of SAR sences in that footprint </p> <p>OR</p> <p><pre><code>s1.summary()\n</code></pre> This will output the summary of availiable Sentinel-1 scenes that covers the AOI. </p> <p><pre><code>Sence: Path 3 Frame 439, Amount: 23, time: 2020-01-01 --&gt; 2020-12-26\nSence: Path 3 Frame 435, Amount: 23, time: 2020-01-01 --&gt; 2020-12-26\nSence: Path 105 Frame 441, Amount: 29, time: 2020-01-08 --&gt; 2020-12-21\nSence: Path 105 Frame 435, Amount: 29, time: 2020-01-08 --&gt; 2020-12-21\n</code></pre> if we decide to choose one SAR sence stacks (Path:3 Frame:435) for further process , simply do: </p> <pre><code>filter_results = s1.pick((3,435))\n</code></pre> <p>You can then review the footprint and summary to confirm that the filter has been applied successfully. <pre><code>s1.footprint()\ns1.summary()\n</code></pre> Which would return: </p> <p> <pre><code>Sence: Path 3 Frame 435, Amount: 23, time: 2020-01-01 --&gt; 2020-12-26\n</code></pre></p>"},{"location":"quickstart/workflow/#interferogram-process","title":"Interferogram Process","text":"<p>After locating SAR scene stacks that cover the Area of Interest (AOI), the next step is to generate unwrapped interferograms in preparation for the SBAS processing. There are two main options to accomplish this:</p> <ul> <li> <p>Local Processing: Generate interferograms locally, starting from the raw SLC data.</p> </li> <li> <p>Online Processing with HyP3: Use the HyP3 platform  provided by ASF to run the interferometric processing in the cloud and download the resulting interferograms.</p> </li> </ul>"},{"location":"quickstart/workflow/#local-processing-isce2","title":"Local Processing (ISCE2)","text":"<p>Abstract</p> <p>Local Processing is under development</p>"},{"location":"quickstart/workflow/#online-processing-with-hyp3","title":"Online Processing with HyP3","text":"<p>HyP3 is an online processing platform provided by ASF (Alaska Satellite Facility). To generate an interferogram, it takes a pair of Sentinel-1 granule IDs as input and produces one interferogram for that pair. InSARScript can automate this process. </p> <pre><code>insar_job = hyp3.submit_insar_job('reference_granule_id', 'secondary_granule_id', 'job_name')\n</code></pre> <p>Assume we have five pairs of granule_ids: <pre><code>pairs = [('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A')]\n</code></pre></p> <p>to submit these pairs, run: </p> <p><pre><code>from insarscript import Hyp3_InSAR_Processor\n\nhyp3_insar = Hyp3_InSAR_Processor(\n    pairs = pairs,\n    out_dir = '~/tmp'\n)\nbatch = hyp3_insar.submit()\n</code></pre> Your processing requests have been submitted to the ASF server. You can check the processing status using:</p> <pre><code>batch = hyp3_insar.refresh()\n</code></pre> <p><pre><code>Output: \nUsername: Your_ASF_UserName\nName:ifg_20200101T215331_20200218T215330 Job ID:68b2be08-2ad7-4cad-9bbb-3d33e8468300 Job type:INSAR_GAMMA Status:RUNNING\nName:ifg_20200101T215331_20200313T215330 Job ID:be57c44f-9514-4b92-8e7b-9e1c9c0d9d08 Job type:INSAR_GAMMA Status:RUNNING\nName:ifg_20200101T215331_20200206T215330 Job ID:c10cc297-2008-491d-a76c-c38958830d87 Job type:INSAR_GAMMA Status:RUNNING\nName:ifg_20200101T215331_20200125T215331 Job ID:61d48bb8-f86d-4b2a-b933-2709b653b86b Job type:INSAR_GAMMA Status:RUNNING\nName:ifg_20200101T215331_20200113T215331 Job ID:28a7f5e7-d8d4-4958-854f-a7e625a0a09e Job type:INSAR_GAMMA Status:RUNNING\n</code></pre> Processing will take roughly 30 mins for every 100 interferograms depends on the ASF server load, you can save the job script to check back later by:</p> <p><pre><code>savepath = hyp3_insar.save()\n</code></pre> This will save current job ids into a JSON file, named hyp3_jobs.json under your workdir by default (e.g. <code>~/tmp/hyp3_jobs.json</code>). The job script will looks like: </p> <p><pre><code>{\n  \"job_ids\": {\n    \"Your_ASF_UserName\": [\n      \"28a7f5e7-d8d4-4958-854f-a7e625a0a09e\",\n      \"61d48bb8-f86d-4b2a-b933-2709b653b86b\",\n      \"c10cc297-2008-491d-a76c-c38958830d87\",\n      \"68b2be08-2ad7-4cad-9bbb-3d33e8468300\",\n      \"be57c44f-9514-4b92-8e7b-9e1c9c0d9d08\"\n    ]\n  },\n  \"out_dir\": \"/Your/Project/Save/Path\"\n}\n</code></pre> To load back this job, simply use: </p> <p><pre><code>hyp3_insar_reload = Hyp3_InSAR_Processor.load(path = '~/tmp/hyp3_jobs.json')\nbatchs = hyp3_insar_reload.refresh()\n</code></pre> <pre><code>Output:\nUsername: Your_ASF_UserName\nName:ifg_20200101T215331_20200218T215330 Job ID:68b2be08-2ad7-4cad-9bbb-3d33e8468300 Job type:INSAR_GAMMA Status:SUCCEEDED\nName:ifg_20200101T215331_20200313T215330 Job ID:be57c44f-9514-4b92-8e7b-9e1c9c0d9d08 Job type:INSAR_GAMMA Status:SUCCEEDED\nName:ifg_20200101T215331_20200206T215330 Job ID:c10cc297-2008-491d-a76c-c38958830d87 Job type:INSAR_GAMMA Status:SUCCEEDED\nName:ifg_20200101T215331_20200125T215331 Job ID:61d48bb8-f86d-4b2a-b933-2709b653b86b Job type:INSAR_GAMMA Status:SUCCEEDED\nName:ifg_20200101T215331_20200113T215331 Job ID:28a7f5e7-d8d4-4958-854f-a7e625a0a09e Job type:INSAR_GAMMA Status:SUCCEEDED\n</code></pre> Seems all interferograms are ready! </p> <p>You can download these interferograms by: </p> <p><pre><code>hyp3_insar_reload.download()\n</code></pre> <pre><code>S1BB_20200101T215331_20200218T215330_VVP048_INT80_G_weF_5991.zip: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 338M/338M [00:11&lt;00:00, 29.9MB/s]\nS1BB_20200101T215331_20200313T215330_VVP072_INT80_G_weF_4CCA.zip: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 340M/340M [00:07&lt;00:00, 50.4MB/s]\nS1BB_20200101T215331_20200206T215330_VVP036_INT80_G_weF_0C8D.zip: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 335M/335M [00:07&lt;00:00, 47.8MB/s]\nS1BB_20200101T215331_20200125T215331_VVP024_INT80_G_weF_74ED.zip: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 334M/334M [00:10&lt;00:00, 31.9MB/s]\nS1BB_20200101T215331_20200113T215331_VVP012_INT80_G_weF_EE06.zip: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 336M/336M [00:06&lt;00:00, 53.0MB/s]\nDownloading:: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:55&lt;00:00, 11.13s/it]\n</code></pre> Once all downloads are complete, you should be able to find the compressed .zip files in your working directory, these contain your processed interferograms!</p>"},{"location":"quickstart/workflow/#sbas","title":"SBAS","text":"<p>Running SBAS requires a set of interferograms generated from SAR image pairs with small spatial and temporal baselines. This approach is designed to minimize phase decorrelation and improve the quality of the deformation signal.</p> <p>InSARScript utilizes MintPy, a powerful open-source toolbox for InSAR time-series analysis, to perform the SBAS workflow.</p>"},{"location":"quickstart/workflow/#connect-with-isce2","title":"Connect with ISCE2","text":"<p>Abstract</p> <p>ISCE2 connection is Under development </p>"},{"location":"quickstart/workflow/#connect-with-hyp3","title":"Connect with HyP3","text":"<p>Let's look back to the <code>filter_results</code> we generated in the Search section: </p> <p><pre><code>from insarscript import S1_SLC\nAOI = [124.67, 46.38, 125.35, 46.85]\ns1 = S1_SLC(\n    platform=['Sentinel-1A', 'Sentinel-1B', 'Sentinel-1C'],\n    AscendingflightDirection=False,\n    bbox = AOI,\n    start='2020-01-01',\n    end='2020-12-31',\n    output_dir = '~/tmp',\n)\nresults = s1.search()\nfilter_results = s1.pick((3,435))\n</code></pre> Before submitting jobs to HyP3 to generate interferograms, we first need to prepare the list of connection pairs.</p> <p><pre><code>from insarscript import select_pairs\nsbas_pairs = select_pairs(search_results= filter_results[(3,435)])\n</code></pre> For this particular stack of scenes, it returns 83 pairs, each representing a valid interferometric connection based on default baseline thresholds. <pre><code>&gt;&gt;&gt; sbas_pairs\n[('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A'), ('S1B_IW_SLC__1SDV_20200101T215331_20200101T215358_019629_025190_2C0B', 'S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200301T215330_20200301T215357_020504_026DA9_212B'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268'), ('S1B_IW_SLC__1SDV_20200113T215331_20200113T215358_019804_025721_53E3', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D', 'S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80'), ('S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D', 'S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D'), ('S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A'), ('S1B_IW_SLC__1SDV_20200125T215331_20200125T215358_019979_025CB6_C45D', 'S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E'), ('S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80', 'S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D'), ('S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A'), ('S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80', 'S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268'), ('S1B_IW_SLC__1SDV_20200206T215330_20200206T215357_020154_026269_0B80', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D', 'S1B_IW_SLC__1SDV_20200301T215330_20200301T215357_020504_026DA9_212B'), ('S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A'), ('S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D', 'S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268'), ('S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D', 'S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E'), ('S1B_IW_SLC__1SDV_20200218T215330_20200218T215357_020329_02680A_426D', 'S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1'), ('S1B_IW_SLC__1SDV_20200301T215330_20200301T215357_020504_026DA9_212B', 'S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A'), ('S1B_IW_SLC__1SDV_20200301T215330_20200301T215357_020504_026DA9_212B', 'S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268'), ('S1B_IW_SLC__1SDV_20200301T215330_20200301T215357_020504_026DA9_212B', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A', 'S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268'), ('S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A', 'S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E'), ('S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A', 'S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1'), ('S1B_IW_SLC__1SDV_20200313T215330_20200313T215357_020679_027335_A83A', 'S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A'), ('S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268', 'S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E'), ('S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200325T215330_20200325T215357_020854_0278BD_7268', 'S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1'), ('S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E', 'S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664'), ('S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E', 'S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1'), ('S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E', 'S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A'), ('S1B_IW_SLC__1SDV_20200406T215330_20200406T215357_021029_027E44_E25E', 'S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E'), ('S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664', 'S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1'), ('S1B_IW_SLC__1SDV_20200418T215331_20200418T215358_021204_0283CE_1664', 'S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0'), ('S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1', 'S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A'), ('S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1', 'S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E'), ('S1B_IW_SLC__1SDV_20200430T215331_20200430T215359_021379_028953_F4D1', 'S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A'), ('S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A', 'S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E'), ('S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A', 'S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0'), ('S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A', 'S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A'), ('S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A', 'S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124'), ('S1B_IW_SLC__1SDV_20200617T215334_20200617T215401_022079_029E6C_FF0A', 'S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052'), ('S1B_IW_SLC__1SDV_20200711T215335_20200711T215403_022429_02A91E_5F7E', 'S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9'), ('S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0', 'S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A'), ('S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0', 'S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA'), ('S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0', 'S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124'), ('S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0', 'S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664'), ('S1B_IW_SLC__1SDV_20200723T215336_20200723T215403_022604_02AE6B_BFA0', 'S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2'), ('S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A', 'S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA'), ('S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A', 'S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124'), ('S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A', 'S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052'), ('S1B_IW_SLC__1SDV_20200804T215337_20200804T215404_022779_02B3BA_EE5A', 'S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9'), ('S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA', 'S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124'), ('S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA', 'S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052'), ('S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA', 'S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664'), ('S1B_IW_SLC__1SDV_20200816T215338_20200816T215405_022954_02B928_36DA', 'S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2'), ('S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124', 'S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052'), ('S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124', 'S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664'), ('S1B_IW_SLC__1SDV_20200828T215338_20200828T215406_023129_02BEA7_3124', 'S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9'), ('S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052', 'S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664'), ('S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052', 'S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9'), ('S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052', 'S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2'), ('S1B_IW_SLC__1SDV_20200921T215339_20200921T215406_023479_02C9A1_C052', 'S1B_IW_SLC__1SDV_20201226T215338_20201226T215405_024879_02F5DA_AC3F'), ('S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664', 'S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9'), ('S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664', 'S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2'), ('S1B_IW_SLC__1SDV_20201003T215339_20201003T215407_023654_02CF1B_F664', 'S1B_IW_SLC__1SDV_20201214T215338_20201214T215405_024704_02F02E_8CBB'), ('S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9', 'S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2'), ('S1B_IW_SLC__1SDV_20201015T215340_20201015T215407_023829_02D48B_23A9', 'S1B_IW_SLC__1SDV_20201226T215338_20201226T215405_024879_02F5DA_AC3F'), ('S1B_IW_SLC__1SDV_20201027T215340_20201027T215407_024004_02DA0A_F8B2', 'S1B_IW_SLC__1SDV_20201214T215338_20201214T215405_024704_02F02E_8CBB'), ('S1B_IW_SLC__1SDV_20201214T215338_20201214T215405_024704_02F02E_8CBB', 'S1B_IW_SLC__1SDV_20201226T215338_20201226T215405_024879_02F5DA_AC3F')]\n</code></pre></p> <p>We now submit our selected pairs to HyP3 for interferogram processing and save job script:</p> <pre><code>from insarscript import Hyp3_InSAR_Processor\nhyp3_sbas = Hyp3_InSAR_Processor(\n    pairs = sbas_pairs,\n    out_dir = '~/tmp'\n)\nbatch = hyp3_sbas.submit()\nhyp3_sbas.save()\nhyp3_sbas.refresh()\n</code></pre> <p>Once processing is complete download all interferograms:</p> <p><pre><code>hyp3_sbas.download()\n</code></pre> We can then perfrom SBAS: </p> <pre><code>from insarscript import Hyp3_SBAS\nsbas_run = Hyp3_SBAS(\n    hyp3_dir = '~/tmp'\n)\nsbas_run.prep_data()\nsbas_run.run()\n</code></pre>"},{"location":"quickstart/workflow/#postprocessing","title":"PostProcessing","text":"<p>currently Hyp3_SBAS support save result into geo-reference GeoTiff</p> <p><pre><code>sbas_run.save_gdal()\n</code></pre> This would save the file named <code>velocity.tif</code> under work directory</p>"}]}